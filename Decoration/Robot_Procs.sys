MODULE Robot_Procs(SYSMODULE,NOSTEPIN,READONLY)
    PROC moveToCali()
        MoveAbsJ jtCali,v400,fine,tool0;
    ENDPROC

    PROC moveToHome()
        MoveAbsJ jtHome,v400,fine,tool0;
    ENDPROC
    
    PROC moveToConv()
        MoveAbsJ jtConv,v400,fine,tool0;
    ENDPROC
    
    PROC goWait()
        MoveJ waitTarget, v400, fine, tSCup;
    ENDPROC
    
    PROC pick(robtarget t)
        MoveJ Offs(t, 0, 0, 100), v200, fine, tSCup;
        WaitTime \InPos, 0;
        MoveL Offs(t, 0, 0, 30), v100, fine, tSCup;
        vacuumOn;
        GripLoad loChoc;
        MoveL Offs(t, 0, 0, 100), v100, fine, tSCup;!\TLoad:=loChoc;
    ENDPROC
    
    PROC place(robtarget t)
        MoveJ Offs(t, 0, 0, 100), v100, fine, tSCup;! \TLoad:=loChoc;
        WaitTime \InPos, 0;
        MoveL Offs(t, 0, 0, 30), v100, fine, tSCup;! \TLoad:=loChoc;
        vacuumOff;
        !GripLoad load0;
        MoveL Offs(t, 0, 0, 100), v100, fine, tSCup;
    ENDPROC
    
    PROC Conv2Table(Block b)
        target:=[[b.p.x, b.p.y, b.p.z],[0,0,-1,0],[0,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
        MoveJ Offs(conv2tableDodge, 0, 0, 0), v400, fine, tSCup;
        pick(target);
        MoveJ Offs(conv2tableDodge, 0, 0, 0), v100, fine, tSCup;! \TLoad:=loChoc;
        place(lookSpot);
    ENDPROC
    
    PROC Table2Cake(Block b)
        target:=[[b.p.x, b.p.y, b.p.z],[0,0,-1,0]*OrientZYX(b.r,0,0),[0,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
        pick(lookSpot);
        place(target);
    ENDPROC
    
    PROC goToTrash()
        pick(lookSpot);
        MoveJ trash, v100, fine, tSCup;
        vacuumOff;
    ENDPROC
    
    !RECEIVING FROM MATLAB
    FUNC Block getConvBlocks()
        VAR Block newBlock;
        mlBlocks := ReadStr(mlStream \Delim:= " ");
        ok := StrToVal(mlBlocks, newBlock.p);
        mlBlocks := ReadStr(mlStream \Delim:= " ");
        ok := StrToVal(mlBlocks, newBlock.r);   !always 0 in this part
        waittime 1;
        RETURN newBlock;
    ENDFUNC
    
    FUNC Block getCakeBlock()
        VAR Block newBlock;
        mlBlocks := ReadStr(mlStream \Delim:= " ");
        ok := StrToVal(mlBlocks, newBlock.p);
        mlBlocks := ReadStr(mlStream \Delim:= " ");
        ok := StrToVal(mlBlocks, newBlock.r);
        waittime 1;
        RETURN newBlock;
    ENDFUNC
    
    PROC messageWait()
        WHILE mlBlocks <> "rDeco" DO
            mlBlocks := ReadStr(mlStream \Delim:= " ");
        ENDWHILE
    ENDPROC
    
    !SENDING TO MATLAB
    PROC sendBlocks2MatLab()
        Write mlSend, "rDeco "\Pos:=convBlock.p \NoNewLine;
        Write mlSend, " "\Num:=convBlock.r \NoNewLine;
        Write mlSend, " "\Pos:=cakeBlock.p \NoNewLine;
        Write mlSend, " "\Num:=cakeBlock.r;
    ENDPROC
    
    PROC sendError(num er)
        IF er = 1 THEN
            Write mlSend, "rDeco atConv"\Pos:=convBlock.p \NoNewLine;
        ELSEIF er = 2 THEN
            Write mlSend, "rDeco atCake"\Pos:=convBlock.p \NoNewLine;
        ENDIF
    ENDPROC
    
    !SENDING TO PERIPHERALS
    PROC vacuumOn()
        WaitTime 1;
    ENDPROC
    
    PROC vacuumOff()
        WaitTime 1;
    ENDPROC
    
ENDMODULE