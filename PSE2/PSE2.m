% PSE 2 Solutions

function PSE2()

Task1();



end

function Task1()

Img = imread('board.tif');
figure(); imshow(Img);

% Part A, show 25% gray image
GrayImg = rgb2gray(Img);
GrayAdjust = GrayImg*0.25;
figure(); imshow(GrayAdjust);

% Part B, Create mask for baige
[BW, MskImage] = createMask(Img);
BinaryMask = bwareaopen(BW,20);             % remove white noise
se = strel('square',2);                     
BinaryMask = imdilate(BinaryMask,se);       % fill in the white ones fully
figure(); imshow(BinaryMask);
% apply mask
BinaryMask = ~BinaryMask;
MaskedRGBImage = bsxfun(@times,Img,cast(BinaryMask,'like',Img));
figure(); imshow(MaskedRGBImage);

% Part C, combine parts A and B
figure(); imshow(GrayAdjust);
hold on;
h = imshow(MaskedImage);
hold off;
set(h, 'AlphaData', BinaryMask);

end

function [BW,maskedRGBImage] = createMask(RGB)
%createMask  Threshold RGB image using auto-generated code from colorThresholder app.
%  [BW,MASKEDRGBIMAGE] = createMask(RGB) thresholds image RGB using
%  auto-generated code from the colorThresholder app. The colorspace and
%  range for each channel of the colorspace were set within the app. The
%  segmentation mask is returned in BW, and a composite of the mask and
%  original RGB images is returned in maskedRGBImage.

% Auto-generated by colorThresholder app on 18-Jun-2019
%------------------------------------------------------


% Convert RGB image to chosen color space
I = rgb2hsv(RGB);

% Define thresholds for channel 1 based on histogram settings
channel1Min = 0.000;
channel1Max = 0.139;

% Define thresholds for channel 2 based on histogram settings
channel2Min = 0.322;
channel2Max = 0.639;

% Define thresholds for channel 3 based on histogram settings
channel3Min = 0.558;
channel3Max = 0.742;

% Create mask based on chosen histogram thresholds
sliderBW = (I(:,:,1) >= channel1Min ) & (I(:,:,1) <= channel1Max) & ...
    (I(:,:,2) >= channel2Min ) & (I(:,:,2) <= channel2Max) & ...
    (I(:,:,3) >= channel3Min ) & (I(:,:,3) <= channel3Max);
BW = sliderBW;

% Initialize output masked image based on input image.
maskedRGBImage = RGB;

% Set background pixels where BW is false to zero.
maskedRGBImage(repmat(~BW,[1 1 3])) = 0;

end

